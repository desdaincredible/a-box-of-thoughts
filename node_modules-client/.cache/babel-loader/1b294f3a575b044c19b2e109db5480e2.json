{"ast":null,"code":"import '../constants/action-types';\nexport function handleRegister(formData) {\n  return function (dispatch) {\n    return fetch(\"http://localhost:9000/users\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(json => {\n      dispatch({\n        type: REGISTER,\n        payload: json\n      });\n    });\n  };\n}\n;\nexport function handleLogin(formData) {\n  return function (dispatch) {\n    return fetch('http://localhost:9000/users/login', {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(json => {\n      dispatch({\n        type: LOGIN_ATTEMPT,\n        payload: json\n      });\n    });\n  };\n} // handleLogin = async (formData) => {\n//   try{\n//     const loginUser = await \n//     const parsedLoginResponse = await loginUser.json();\n//     console.log(parsedLoginResponse, 'login')\n//     if(parsedLoginResponse.status === 200){\n//       this.setState({\n//         loggedIn: true,\n//         currentUser: parsedLoginResponse.data,\n//       })\n//     }\n//   }catch(err){\n//     console.log(err);\n//   }\n// };\n// logout = async () => {\n//   this.setState({\n//     loggedIn: false,\n//     currentUser: null\n//   })\n// };","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/actions/actions.js"],"names":["handleRegister","formData","dispatch","fetch","method","body","JSON","stringify","credentials","headers","then","response","json","type","REGISTER","payload","handleLogin","LOGIN_ATTEMPT"],"mappings":"AAAA,OAAO,2BAAP;AAGA,OAAO,SAASA,cAAT,CAAwBC,QAAxB,EAAiC;AACpC,SAAO,UAASC,QAAT,EAAkB;AACrB,WAAOC,KAAK,CAAC,6BAAD,EAAgC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAFkC;AAGxCO,MAAAA,WAAW,EAAE,SAH2B;AAIxCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJ+B,KAAhC,CAAL,CAQFC,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFF,IATE,CASGE,IAAI,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEC,QAAR;AAAkBC,QAAAA,OAAO,EAAEH;AAA3B,OAAD,CAAR;AACnB,KAVM,CAAP;AAWH,GAZD;AAaH;AAAA;AAED,OAAO,SAASI,WAAT,CAAqBf,QAArB,EAA8B;AACnC,SAAO,UAASC,QAAT,EAAkB;AACvB,WAAOC,KAAK,CAAC,mCAAD,EAAsC;AAChDC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAF0C;AAGhDO,MAAAA,WAAW,EAAE,SAHmC;AAIhDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJuC,KAAtC,CAAL,CAQFC,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFF,IATE,CASGE,IAAI,IAAI;AAAEV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEI,aAAR;AAAuBF,QAAAA,OAAO,EAAEH;AAAhC,OAAD,CAAR;AAAgD,KAT7D,CAAP;AAUD,GAXD;AAYD,C,CACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import '../constants/action-types';\n\n\nexport function handleRegister(formData){\n    return function(dispatch){\n        return fetch(\"http://localhost:9000/users\", {\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            credentials: 'include',\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          })\n            .then(response => response.json())\n            .then(json => { dispatch({ type: REGISTER, payload: json});\n        })\n    }\n};\n\nexport function handleLogin(formData){\n  return function(dispatch){\n    return fetch('http://localhost:9000/users/login', {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n      })\n        .then(response => response.json())\n        .then(json => { dispatch({ type: LOGIN_ATTEMPT, payload: json})})\n  }\n}\n  // handleLogin = async (formData) => {\n  //   try{\n  //     const loginUser = await \n  //     const parsedLoginResponse = await loginUser.json();\n  //     console.log(parsedLoginResponse, 'login')\n  //     if(parsedLoginResponse.status === 200){\n  //       this.setState({\n  //         loggedIn: true,\n  //         currentUser: parsedLoginResponse.data,\n  //       })\n  //     }\n  //   }catch(err){\n  //     console.log(err);\n  //   }\n  // };\n\n  // logout = async () => {\n  //   this.setState({\n  //     loggedIn: false,\n  //     currentUser: null\n  //   })\n  // };"]},"metadata":{},"sourceType":"module"}