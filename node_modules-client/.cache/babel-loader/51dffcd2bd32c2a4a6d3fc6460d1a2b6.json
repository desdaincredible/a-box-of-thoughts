{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, updateBoard, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: user => dispatch(getUser(user)),\n    deleteBoard: board => dispatch(deleteBoard(board)),\n    editBoard: board => dispatch(editBoard(board)),\n    findEditBoard: board => dispatch(findEditBoard(board)) // updateBoard: board => dispatch(updateBoard(board)),\n\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    renderBoardDetail: state.renderBoardDetail,\n    boards: state.boards,\n    selectedImage: state.selectedImage\n  };\n};\n\nclass ConnectedBoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.props.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      this.props.getUser();\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = e => {\n      this.setState({\n        id: e.target.id\n      });\n      this.toggle();\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.props.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.props.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardAfterDelete(board);\n    };\n\n    this.editBoardButtonClick = e => {\n      console.log('hit edit button');\n      this.toggleEdit();\n      this.setState({\n        editBoardId: e.target.id\n      }); // this.props.boards.map((board) => {\n      //     if (board._id === this.state.editBoardId){\n      //         console.log(board, 'board in if check')\n      //         this.props.findEditBoard(board)\n      //     }\n      // })\n    };\n\n    this.handleEditSubmit = text => {\n      console.log('edit submit hit');\n      console.log(text, 'text');\n      console.log(this.state.editBoardId, 'board id in handle edit submit');\n      this.props.editBoard(text, this.state.editBoardId);\n      this.toggleEdit();\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      editModal: false,\n      id: \"\",\n      editBoardId: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUser();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  toggleEdit() {\n    this.setState(prevState => ({\n      editModal: !prevState.editModal\n    }));\n  }\n\n  render() {\n    console.log(this.state.editBoardId, 'board id in container');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), this.props.renderBoardDetail ? React.createElement(BoardDetail, {\n      toggleEdit: this.toggleEdit,\n      editModal: this.state.editModal,\n      editBoardId: this.state.editBoardId,\n      editBoardButtonClick: this.editBoardButtonClick,\n      handleEditSubmit: this.handleEditSubmit,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx"],"names":["React","Component","connect","MakeBoard","BoardDetail","getUser","updateBoard","deleteBoard","editBoard","findEditBoard","mapDispatchToProps","dispatch","user","board","mapStateToProps","state","renderBoardDetail","boards","selectedImage","ConnectedBoardContainer","constructor","handleImageSubmit","toggle","props","map","_id","id","foundBoard","images","push","fetch","process","env","REACT_APP_BACKEND_ADDRESS","method","body","JSON","stringify","headers","handleImageClick","e","image","setState","addNewImageButtonClick","target","deleteBoardButtonClick","deleteImageButtonClick","i","splice","updateBoardAfterDelete","editBoardButtonClick","console","log","toggleEdit","editBoardId","handleEditSubmit","text","classChange","modal","editModal","bind","componentDidMount","prevState","render","selectedImageStateChange","imageStateChange","BoardContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, updateBoard, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUser: user => dispatch(getUser(user)),\n        deleteBoard: board => dispatch(deleteBoard(board)),\n        editBoard: board => dispatch(editBoard(board)),\n        findEditBoard: board => dispatch(findEditBoard(board)),\n        // updateBoard: board => dispatch(updateBoard(board)),\n    }\n  };\n\nconst mapStateToProps = state => {\n    return { \n        renderBoardDetail: state.renderBoardDetail, \n        boards: state.boards,\n        selectedImage: state.selectedImage,\n    }\n};\n\nclass ConnectedBoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            editModal: false,\n            id: \"\",\n            editBoardId: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n    }\n\n    componentDidMount(){\n        this.props.getUser();\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.props.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        this.props.getUser();\n    };\n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    toggleEdit(){\n        this.setState(prevState => ({\n            editModal: !prevState.editModal\n        }));\n    };\n\n    addNewImageButtonClick = (e) => {\n            this.setState({\n                id: e.target.id\n        })\n        this.toggle();\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.props.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.props.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardAfterDelete(board);\n    }; \n\n    editBoardButtonClick = (e) => {\n        console.log('hit edit button')\n        this.toggleEdit();\n        this.setState({\n            editBoardId: e.target.id\n        })\n        // this.props.boards.map((board) => {\n        //     if (board._id === this.state.editBoardId){\n        //         console.log(board, 'board in if check')\n        //         this.props.findEditBoard(board)\n        //     }\n        // })\n    };\n\n    handleEditSubmit = (text) => {\n        console.log('edit submit hit')\n        console.log(text, 'text')\n        console.log(this.state.editBoardId, 'board id in handle edit submit')\n        this.props.editBoard(text, this.state.editBoardId)\n\n        this.toggleEdit();\n    };\n\n\n    render(){\n        console.log(this.state.editBoardId, 'board id in container')\n        return (\n            <div>   \n                <MakeBoard updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal }\n\n                selectedImageStateChange={ this.selectedImageStateChange } \n                handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n                  classChange={ this.state.classChange } \n                handleImageSubmit={ this.handleImageSubmit } />\n                <hr />\n                {\n                    this.props.renderBoardDetail ?\n                        <BoardDetail toggleEdit={ this.toggleEdit } editModal={ this.state.editModal } editBoardId={ this.state.editBoardId }\n                        editBoardButtonClick={ this.editBoardButtonClick } handleEditSubmit={ this.handleEditSubmit }\n\n                        addNewImageButtonClick={ this.addNewImageButtonClick } \n                        deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick }\n                        />\n                    :\n                    null\n                }      \n                 \n            </div>\n        )\n    }\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}