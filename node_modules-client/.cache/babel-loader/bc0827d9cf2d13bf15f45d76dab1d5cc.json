{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-24-react-app-python-backend/image-board-creator-react-python/client/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards\"), {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards\"), {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [parsedResponse.data, ...this.state.boards]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.state.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n      });\n      this.toggle();\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteBoard = async id => {\n      console.log(id);\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"DELETE\"\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: this.state.boards.filter(board => board._id !== id)\n        });\n      }\n    };\n\n    this.updateBoardAfterDelete = async board => {\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(board._id), {\n        method: \"PUT\",\n        body: JSON.stringify(board),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, board]\n        });\n      }\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardAfterDelete(board);\n    };\n\n    this.editBoardButtonClick = e => {\n      this.setState({\n        editBoardId: e.target.id\n      });\n      this.toggleEdit();\n    };\n\n    this.handleEditSubmit = text => {\n      this.state.boards.map(board => {\n        if (board._id === this.state.editBoardId) {\n          this.editBoard(text, board);\n        }\n      });\n      this.toggleEdit();\n    };\n\n    this.editBoard = async (text, board) => {\n      console.log(text);\n      console.log(board);\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(this.state.editBoardId), {\n        method: \"PUT\",\n        body: JSON.stringify(text),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, text, board]\n        });\n      }\n\n      this.getBoards();\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      editModal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\",\n      editBoardId: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  toggleEdit() {\n    this.setState(prevState => ({\n      editModal: !prevState.editModal\n    }));\n  }\n\n  render() {\n    return this.props.currentUser ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      toggleEdit: this.toggleEdit,\n      editModal: this.state.editModal,\n      editBoardButtonClick: this.editBoardButtonClick,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-24-react-app-python-backend/image-board-creator-react-python/client/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","process","env","REACT_APP_BACKEND_ADDRESS","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","handleImageSubmit","toggle","map","board","_id","id","updateBoard","handleImageClick","e","image","addNewImageButtonClick","target","foundBoard","images","push","deleteBoardButtonClick","deleteBoard","console","log","response","filter","updateBoardAfterDelete","deleteImageButtonClick","i","splice","editBoardButtonClick","editBoardId","toggleEdit","handleEditSubmit","text","editBoard","classChange","modal","editModal","bind","componentDidMount","prevState","render","props","currentUser","imageStateChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            editModal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\",\n            editBoardId: \"\"\n        }\n        this.toggle = this.toggle.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n    }\n\n    componentDidMount(){\n        this.getBoards();\n    };\n\n    getBoards = async () => {\n        const boards = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards`, {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n\n    createBoard = async (formData) => {\n        const newBoard = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards`, {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [parsedResponse.data, ...this.state.boards]\n            })\n        }\n    };\n\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.state.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    toggleEdit(){\n        this.setState(prevState => ({\n            editModal: !prevState.editModal\n        }));\n    };\n\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n        })\n        this.toggle();\n    };\n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteBoard = async (id) => {\n        console.log(id)\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"DELETE\",\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: this.state.boards.filter(board => board._id !== id)\n            })\n        }\n    }; \n\n    updateBoardAfterDelete = async (board) => {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${board._id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(board),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, board]\n            })\n        }\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardAfterDelete(board);\n    }; \n\n    // change add new image to this?\n    editBoardButtonClick = (e) => {\n        this.setState({\n            editBoardId: e.target.id\n        })\n        this.toggleEdit();\n    };\n\n    handleEditSubmit = (text) => {\n        this.state.boards.map((board) => {\n            if (board._id === this.state.editBoardId){\n                this.editBoard(text, board)\n            }\n        })\n        this.toggleEdit();\n    };\n\n    // figure out why this is working but breaking image loop\n    editBoard = async (text, board) => {\n        console.log(text)\n        console.log(board)\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${this.state.editBoardId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(text),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, text, board]\n            })\n        }\n        this.getBoards();\n    }; \n\n    render(){\n        return (\n            this.props.currentUser ?\n            <div>\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleImageSubmit={ this.handleImageSubmit } />            \n            \n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } \n            deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick }\n            toggleEdit={ this.toggleEdit } editModal={ this.state.editModal } editBoardButtonClick={ this.editBoardButtonClick }\n            handleEditSubmit={ this.handleEditSubmit }  />\n            </div>\n            :\n            <div>\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleImageSubmit={ this.handleImageSubmit } /> \n            </div>  \n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}