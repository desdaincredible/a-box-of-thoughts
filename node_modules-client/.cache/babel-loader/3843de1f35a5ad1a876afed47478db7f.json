{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [parsedResponse.data, ...this.state.boards]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.imageStateChange = newState => {\n      this.setState({\n        images: newState.images\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.state.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n      });\n      this.toggle();\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteBoard = async id => {\n      console.log(id);\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"DELETE\"\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: this.state.boards.filter(board => board._id !== id)\n        });\n      }\n    };\n\n    this.deleteImageButtonClick = (e, id) => {\n      this.setState({\n        containerId: ReactDOM.findDOMNode(this).parentNode.getAttribute(\"id\")\n      });\n      this.state.boards.map((board, i) => {\n        // if (board.images === e.target.id){\n        console.log(board.images); // this.deleteImage(board.images)\n        // }\n      });\n    };\n\n    this.deleteImage = async image => {\n      console.log(this.state.containerId);\n      console.log(image);\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(this.state.containerId), {\n        method: \"DELETE\"\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, this.state.boards.images.filter(image => image._id !== image)]\n        });\n      }\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\",\n      deleteBoardId: \"\",\n      containerId: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      results: this.state.results,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","ReactDOM","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","imageStateChange","images","handleImageSubmit","toggle","map","board","_id","id","updateBoard","handleImageClick","e","image","addNewImageButtonClick","target","foundBoard","push","deleteBoardButtonClick","deleteBoard","console","log","response","filter","deleteImageButtonClick","containerId","findDOMNode","parentNode","getAttribute","i","deleteImage","classChange","modal","deleteBoardId","bind","componentDidMount","prevState","render","results"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\",\n            deleteBoardId: \"\",\n            containerId: \"\"\n\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n\n    componentDidMount(){\n        this.getBoards();\n    };\n\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n    // fix bug that doesn't allow modal toggle\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [parsedResponse.data, ...this.state.boards]\n            })\n        }\n    };\n\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n\n    imageStateChange = (newState) => {\n        this.setState({\n            images: newState.images\n        })\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.state.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n        })\n        this.toggle();\n    };\n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteBoard = async (id) => {\n        console.log(id)\n        const response = await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"DELETE\",\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: this.state.boards.filter(board => board._id !== id)\n            })\n        }\n    }; \n\n    deleteImageButtonClick = (e, id) => {\n        this.setState({\n            containerId: ReactDOM.findDOMNode(this).parentNode.getAttribute(\"id\")\n        })\n        this.state.boards.map((board, i) => {\n            // if (board.images === e.target.id){\n                console.log(board.images)\n\n                // this.deleteImage(board.images)\n            // }\n        })\n    };\n\n    deleteImage = async (image) => {\n        console.log(this.state.containerId)\n        console.log(image)\n        const response = await fetch(`http://localhost:9000/boards/${this.state.containerId}`, {\n            method: \"DELETE\",\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, this.state.boards.images.filter(image => image._id !== image)]\n            })\n        }\n    }; \n\n    render(){\n        return (\n            <div>\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleImageSubmit={ this.handleImageSubmit } results={ this.state.results } />            \n            \n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } \n            deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}