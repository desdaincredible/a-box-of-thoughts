{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }); // console.log(newBoard, 'newBoard')\n\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, parsedResponse]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.imageStateChange = newState => {\n      this.setState({\n        images: newState.images\n      });\n    };\n\n    this.handleEditSubmit = () => {\n      this.toggle();\n      this.updateBoard(this.state.id);\n    };\n\n    this.findBoard = () => {\n      this.state.boards.map(board => {\n        if (this.state.id === board._id) {\n          this.foundBoard = board;\n        }\n      });\n      console.log(this.state.foundBoard);\n    };\n\n    this.updateBoard = async foundBoard => {\n      console.log(foundBoard, 'foundBoard');\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(this.state.id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const updatedBoard = await response.json();\n      console.log(updatedBoard, 'board');\n\n      if (response.status === 200) {\n        console.log('update successful');\n        console.log(updatedBoard, 'updatedBoard');\n        this.setState({\n          boards: this.state.boards.map(eachBoard => {\n            if (eachBoard._id === this.state.id) {\n              return updatedBoard;\n            }\n\n            return eachBoard;\n          })\n        });\n      }\n    };\n\n    this.toggleClass = () => {\n      // console.log(this.state.classChange, 'toggle class');\n      this.setState({\n        classChange: true\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      });\n      this.imageStateChange(this.state);\n      this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n        this.toggle();\n        this.findBoard();\n      });\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    foundBoard = this.foundBoard;\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    // console.log(this.state.id, 'this.state.id from board container')\n    console.log(this.state.boards);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"BoardContainer\"), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","imageStateChange","images","handleEditSubmit","toggle","updateBoard","id","findBoard","map","board","_id","foundBoard","console","log","response","updatedBoard","eachBoard","toggleClass","classChange","handleImageClick","e","image","addNewImageButtonClick","target","modal","bind","componentDidMount","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n        foundBoard = this.foundBoard;\n    }\n    componentDidMount(){\n        this.getBoards();\n    }\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        // console.log(newBoard, 'newBoard')\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [...this.state.boards, parsedResponse]\n            })\n        }\n    };\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n    imageStateChange = (newState) => {\n        this.setState({\n            images: newState.images\n        })\n    };\n    handleEditSubmit = ()=> {\n        this.toggle();\n        this.updateBoard(this.state.id);\n    };\n    findBoard = () => {\n        this.state.boards.map((board) => {\n            if(this.state.id === board._id){\n                    this.foundBoard = board\n            }\n        })\n        console.log(this.state.foundBoard)\n    };\n    updateBoard = async (foundBoard) => {\n        console.log(foundBoard, 'foundBoard')\n        const response = await fetch(`http://localhost:9000/boards/${this.state.id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const updatedBoard = await response.json();\n        console.log(updatedBoard, 'board')\n        if(response.status === 200){\n            console.log('update successful')\n            console.log(updatedBoard, 'updatedBoard')\n            this.setState({\n                boards: this.state.boards.map((eachBoard) => {\n                    if(eachBoard._id === this.state.id){\n                        return updatedBoard\n                    }\n                    return eachBoard\n                })\n            })\n        }\n    }; \n    toggleClass = () => {\n        // console.log(this.state.classChange, 'toggle class');\n        this.setState({\n            classChange: true\n        })\n    };\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        this.imageStateChange(this.state);\n        this.toggleClass();\n    };\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n    };\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n            this.toggle();\n            this.findBoard();\n        })\n    };\n\n    render(){\n        // console.log(this.state.id, 'this.state.id from board container')\nconsole.log(this.state.boards)\n        return (\n            <div>\n            <h1>BoardContainer</h1>\n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } />\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleEditSubmit={ this.handleEditSubmit } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}