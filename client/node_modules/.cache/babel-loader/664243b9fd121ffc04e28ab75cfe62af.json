{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(newBoard, 'newBoard');\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, parsedResponse]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.imageStateChange = newState => {\n      this.setState({\n        images: newState.images\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.state.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n        this.toggle();\n      });\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          deleteBoardId: e.target.id\n        });\n\n        if (board._id === this.state.deleteBoardId) {\n          this.deleteBoard(board, board._id);\n        }\n      });\n      this.getBoards();\n    };\n\n    this.deleteBoard = async (foundBoard, id) => {\n      console.log(\"delete board \".concat(id));\n      const deletedBoard = await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"DELETE\"\n      });\n\n      if (deletedBoard.status === 200) {\n        this.setState({\n          boards: this.state.boards.filter(board => board._id != id)\n        });\n      }\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\",\n      deleteBoardId: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    console.log(this.state.deleteBoardId, 'delete id');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      results: this.state.results,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","console","log","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","imageStateChange","images","handleImageSubmit","toggle","map","board","_id","id","updateBoard","foundBoard","push","response","handleImageClick","e","image","addNewImageButtonClick","target","deleteBoardButtonClick","deleteBoardId","deleteBoard","deletedBoard","filter","classChange","modal","bind","componentDidMount","prevState","render","results"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\",\n            deleteBoardId: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n    componentDidMount(){\n        this.getBoards();\n    };\n\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n    // fix bug that doesn't allow modal toggle\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        console.log(newBoard, 'newBoard')\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [...this.state.boards, parsedResponse]\n            })\n        }\n    };\n\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n\n    imageStateChange = (newState) => {\n        this.setState({\n            images: newState.images\n        })\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.state.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    };\n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        const response = await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n    }; \n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n    };\n\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n            this.toggle();\n        })\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                deleteBoardId: e.target.id,\n            })\n            if(board._id === this.state.deleteBoardId){\n                this.deleteBoard(board, board._id)\n            }\n        })\n        this.getBoards();\n    };\n\n    deleteBoard = async (foundBoard, id) => {\n        console.log(`delete board ${id}`)\n        const deletedBoard = await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"DELETE\",\n        })\n        if(deletedBoard.status === 200){\n            this.setState({\n                boards: this.state.boards.filter(board => board._id != id)\n            })\n        }\n    }; \n\n    render(){\n        console.log(this.state.deleteBoardId, 'delete id')\n        return (\n            <div>\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleImageSubmit={ this.handleImageSubmit } results={ this.state.results } />            \n            \n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } \n            deleteBoardButtonClick={ this.deleteBoardButtonClick } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}