{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }); // console.log(newBoard, 'newBoard')\n\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, parsedResponse]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.imageStateChange = newState => {\n      this.setState({\n        images: newState.images\n      });\n    };\n\n    this.handleEditSubmit = () => {\n      this.toggle();\n      this.state.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      console.log(foundBoard.images, 'foundBoard');\n      console.log('state image', this.state.selectedImage);\n      console.log(id, 'found id');\n      const boardToUpdate = foundBoard.images.push(this.state.selectedImage);\n      console.log('update board', boardToUpdate);\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"PUT\",\n        mode: 'cors',\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(response); // const updatedBoard = await response.json();\n      // console.log(updatedBoard, 'board')\n      // if(response.status === 200){\n      //     console.log('update successful')\n      //     console.log(updatedBoard, 'updatedBoard')\n      //     const editedBoardsArray = this.state.boards.map((board) => {\n      //         if(board._id === id){\n      //             board = updatedBoard.data\n      //         }\n      //         return board\n      //     });\n      //     this.setState({\n      //         boards: editedBoardsArray\n      //     })\n      // }\n    };\n\n    this.toggleClass = () => {\n      // console.log(this.state.classChange, 'toggle class');\n      this.setState({\n        classChange: true\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      });\n      this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n        this.toggle();\n      });\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    let _foundBoard = this.foundBoard;\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"BoardContainer\"), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","imageStateChange","images","handleEditSubmit","toggle","map","board","_id","id","updateBoard","foundBoard","console","log","boardToUpdate","push","response","mode","toggleClass","classChange","handleImageClick","e","image","addNewImageButtonClick","target","modal","bind","componentDidMount","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n        let foundBoard = this.foundBoard;\n    }\n    componentDidMount(){\n        this.getBoards();\n    }\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        // console.log(newBoard, 'newBoard')\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [...this.state.boards, parsedResponse]\n            })\n        }\n    };\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n    imageStateChange = (newState) => {\n        this.setState({\n            images: newState.images\n        })\n    };\n    handleEditSubmit = ()=> {\n        this.toggle();\n        this.state.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    };\n    updateBoard = async (foundBoard, id) => {\n        console.log(foundBoard.images, 'foundBoard')\n        console.log('state image', this.state.selectedImage);\n        console.log(id, 'found id')\n        const boardToUpdate = foundBoard.images.push(this.state.selectedImage);\n        console.log('update board', boardToUpdate)\n        const response = await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"PUT\",\n            mode: 'cors',\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        console.log(response)\n        // const updatedBoard = await response.json();\n        // console.log(updatedBoard, 'board')\n        // if(response.status === 200){\n        //     console.log('update successful')\n        //     console.log(updatedBoard, 'updatedBoard')\n        //     const editedBoardsArray = this.state.boards.map((board) => {\n        //         if(board._id === id){\n        //             board = updatedBoard.data\n        //         }\n        //         return board\n        //     });\n        //     this.setState({\n        //         boards: editedBoardsArray\n        //     })\n        // }\n    }; \n    toggleClass = () => {\n        // console.log(this.state.classChange, 'toggle class');\n        this.setState({\n            classChange: true\n        })\n    };\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        this.toggleClass();\n    };\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n\n    };\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n            this.toggle();\n        })\n    };\n\n    render(){\n        return (\n            <div>\n            <h1>BoardContainer</h1>\n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } />\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleEditSubmit={ this.handleEditSubmit } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}