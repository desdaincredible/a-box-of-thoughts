{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: user => dispatch(getUser(user)),\n    deleteBoard: board => dispatch(deleteBoard(board)),\n    editBoard: board => dispatch(editBoard(board)),\n    findEditBoard: board => dispatch(findEditBoard(board))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    renderBoardDetail: state.renderBoardDetail,\n    boards: state.boards,\n    selectedImage: state.selectedImage\n  };\n};\n\nclass ConnectedBoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.updateBoard = async (foundBoard, id) => {\n      console.log(foundBoard, id, 'foundboard in update');\n      console.log(this.state.selectedImage);\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      this.props.getUser();\n      console.log(foundBoard);\n    };\n\n    this.handleImageClick = (e, image) => {\n      console.log(e, 'image click');\n      this.setState({\n        selectedImage: e\n      });\n    };\n\n    this.addNewImageButtonClick = e => {\n      this.setState({\n        id: e.target.id\n      });\n      this.toggle();\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.props.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.props.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardAfterDelete(board);\n    };\n\n    this.editBoardButtonClick = e => {\n      this.toggleEdit();\n      this.setState({\n        editBoardId: e.target.id,\n        findBoardToggle: true\n      });\n    };\n\n    this.handleEditSubmit = response => {\n      console.log(response, 'response');\n      console.log(this.state.editBoardId, 'editboardid');\n      this.props.editBoard(response, this.state.editBoardId);\n      this.toggleEdit();\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      editModal: false,\n      id: \"\",\n      editBoardId: \"\",\n      findBoardToggle: false,\n      search: \"\",\n      results: [],\n      images: [],\n      title: \"\",\n      description: \"\",\n      selectedImage: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUser();\n  }\n\n  handleImageSubmit() {\n    this.toggle();\n    this.props.boards.map(board => {\n      if (board._id === this.state.id) {\n        this.updateBoard(board, board._id);\n      }\n    });\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  toggleEdit() {\n    this.setState(prevState => ({\n      editModal: !prevState.editModal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      search: this.state.search,\n      results: this.state.results,\n      images: this.state.images,\n      title: this.state.title,\n      description: this.state.description,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.props.renderBoardDetail ? React.createElement(BoardDetail, {\n      toggleEdit: this.toggleEdit,\n      editModal: this.state.editModal,\n      editBoardId: this.state.editBoardId,\n      editBoardButtonClick: this.editBoardButtonClick,\n      handleEditSubmit: this.handleEditSubmit,\n      findBoardToggle: this.state.findBoardToggle,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx"],"names":["React","Component","connect","MakeBoard","BoardDetail","getUser","deleteBoard","editBoard","findEditBoard","mapDispatchToProps","dispatch","user","board","mapStateToProps","state","renderBoardDetail","boards","selectedImage","ConnectedBoardContainer","constructor","updateBoard","foundBoard","id","console","log","images","push","fetch","process","env","REACT_APP_BACKEND_ADDRESS","method","body","JSON","stringify","headers","props","handleImageClick","e","image","setState","addNewImageButtonClick","target","toggle","deleteBoardButtonClick","map","_id","deleteImageButtonClick","i","splice","updateBoardAfterDelete","editBoardButtonClick","toggleEdit","editBoardId","findBoardToggle","handleEditSubmit","response","classChange","modal","editModal","search","results","title","description","bind","componentDidMount","handleImageSubmit","prevState","render","selectedImageStateChange","imageStateChange","BoardContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUser: user => dispatch(getUser(user)),\n        deleteBoard: board => dispatch(deleteBoard(board)),\n        editBoard: board => dispatch(editBoard(board)),\n        findEditBoard: board => dispatch(findEditBoard(board)),\n    }\n  };\n\nconst mapStateToProps = state => {\n    return { \n        renderBoardDetail: state.renderBoardDetail, \n        boards: state.boards,\n        selectedImage: state.selectedImage,\n    }\n};\n\nclass ConnectedBoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            editModal: false,\n            id: \"\",\n            editBoardId: \"\",\n            findBoardToggle: false,\n            search: \"\",\n            results: [],\n            images: [],\n            title: \"\",\n            description: \"\",\n            selectedImage: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n    }\n\n    componentDidMount(){\n        this.props.getUser();\n    };\n\n    handleImageSubmit(){\n        this.toggle();\n        this.props.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    updateBoard = async (foundBoard, id) => {\n        console.log(foundBoard, id, 'foundboard in update')\n        console.log(this.state.selectedImage)\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        this.props.getUser();\n        console.log(foundBoard)\n    };\n\n    handleImageClick = (e, image) => {\n        console.log(e, 'image click')\n        this.setState({\n            selectedImage: e\n        })\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    toggleEdit(){\n        this.setState(prevState => ({\n            editModal: !prevState.editModal\n        }));\n    };\n\n    addNewImageButtonClick = (e) => {\n        this.setState({\n            id: e.target.id\n        })\n        this.toggle();\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.props.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.props.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardAfterDelete(board);\n    }; \n\n    editBoardButtonClick = (e) => {\n        this.toggleEdit();\n        this.setState({\n            editBoardId: e.target.id,\n            findBoardToggle: true,\n        })\n    };\n\n    handleEditSubmit = (response) => {\n        console.log(response, 'response')\n        console.log(this.state.editBoardId, 'editboardid')\n\n        this.props.editBoard(response, this.state.editBoardId)\n        this.toggleEdit();\n    };\n\n\n\n    render(){\n        return (\n            <div>   \n                <MakeBoard updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal }\n                search={this.state.search} results={this.state.results} images={this.state.images} title={this.state.title}\n                description={this.state.description}\n\n                selectedImageStateChange={ this.selectedImageStateChange } \n                handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n                  classChange={ this.state.classChange } \n                handleImageSubmit={ this.handleImageSubmit } />\n                <hr />\n                {\n                    this.props.renderBoardDetail ?\n                        <BoardDetail toggleEdit={ this.toggleEdit } editModal={ this.state.editModal } editBoardId={ this.state.editBoardId }\n                        editBoardButtonClick={ this.editBoardButtonClick } handleEditSubmit={ this.handleEditSubmit } findBoardToggle={this.state.findBoardToggle}\n\n                        addNewImageButtonClick={ this.addNewImageButtonClick } \n                        deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick }\n                        />\n                    :\n                    null\n                }      \n                 \n            </div>\n        )\n    }\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}