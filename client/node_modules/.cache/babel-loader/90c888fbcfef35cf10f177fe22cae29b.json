{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }); // console.log(newBoard, 'newBoard')\n\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, parsedResponse]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.imageStateChange = newState => {\n      this.setState({\n        images: newState.images\n      });\n    };\n\n    this.handleEditSubmit = () => {\n      this.state.boards.map(board => {\n        board.images = [...board.images, this.state.selectedImage];\n      });\n      this.toggle();\n      this.updateBoard();\n    };\n\n    this.updateBoard = async (_id, board) => {\n      console.log(_id, 'id from update board');\n      board = await fetch(\"http://localhost:9000/boards/\".concat(_id), {\n        method: \"PUT\",\n        body: JSON.stringify(board),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const updatedBoard = await board.json();\n      console.log(board, 'board');\n      console.log(updatedBoard, 'updatedBoard');\n\n      if (board.status === 200) {\n        console.log('update successful');\n        this.setState({\n          boards: this.state.boards.map(eachBoard => {\n            console.log(eachBoard._id, 'eachBoard id');\n\n            if (_id === this.state.id) {\n              return updatedBoard;\n            }\n\n            return eachBoard;\n          })\n        });\n      }\n    };\n\n    this.toggleClass = () => {\n      // console.log(this.state.classChange, 'toggle class');\n      this.setState({\n        classChange: true\n      });\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      });\n      this.imageStateChange(this.state);\n      this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        console.log(id, 'id from add new image button');\n        this.setState({\n          id: null,\n          id: e.target.id\n        });\n        this.toggle();\n      });\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    console.log(this.state.id, 'this.state.id from board container');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"BoardContainer\"), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","imageStateChange","images","handleEditSubmit","map","board","toggle","updateBoard","_id","console","log","updatedBoard","eachBoard","id","toggleClass","classChange","handleImageClick","e","image","addNewImageButtonClick","target","modal","bind","componentDidMount","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\"\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n    componentDidMount(){\n        this.getBoards();\n    }\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        // console.log(newBoard, 'newBoard')\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [...this.state.boards, parsedResponse]\n            })\n        }\n    };\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n    imageStateChange = (newState) => {\n        this.setState({\n            images: newState.images\n        })\n    };\n    handleEditSubmit = ()=> {\n        this.state.boards.map((board) => {\n            board.images = [...board.images, this.state.selectedImage]\n        })\n        this.toggle();\n        this.updateBoard();\n    };\n    updateBoard = async (_id, board) => {\n        console.log(_id, 'id from update board')\n        board = await fetch(`http://localhost:9000/boards/${_id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(board),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const updatedBoard = await board.json();\n        console.log(board, 'board')\n        console.log(updatedBoard, 'updatedBoard')\n        if(board.status === 200){\n            console.log('update successful');\n            this.setState({\n                boards: this.state.boards.map((eachBoard) => {\n                    console.log(eachBoard._id, 'eachBoard id')\n                    if(_id === this.state.id){\n                        return updatedBoard\n                    }\n                    return eachBoard\n                })\n            })\n        }\n    }; \n    toggleClass = () => {\n        // console.log(this.state.classChange, 'toggle class');\n        this.setState({\n            classChange: true\n        })\n    };\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        this.imageStateChange(this.state);\n        this.toggleClass();\n    };\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            console.log(id, 'id from add new image button')\n\n            this.setState({\n                id: null,\n                id: e.target.id\n            })\n            this.toggle();\n        })\n    };\n\n    render(){\n        console.log(this.state.id, 'this.state.id from board container')\n\n        return (\n            <div>\n            <h1>BoardContainer</h1>\n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } />\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleEditSubmit={ this.handleEditSubmit } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}