{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: user => dispatch(getUser(user)),\n    deleteBoard: board => dispatch(deleteBoard(board)),\n    editBoard: board => dispatch(editBoard(board)),\n    findEditBoard: board => dispatch(findEditBoard(board))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    renderBoardDetail: state.renderBoardDetail,\n    boards: state.boards,\n    selectedImage: state.selectedImage,\n    editBoard: state.editBoard\n  };\n};\n\nclass ConnectedBoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.props.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n\n    this.updateBoardImgDelete = async foundBoard => {\n      console.log(foundBoard);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(foundBoard._id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      this.forceUpdate();\n    };\n\n    this.handleImageClick = (e, image) => {\n      console.log(e, 'image click');\n      this.setState({\n        selectedImage: e\n      });\n    };\n\n    this.addNewImageButtonClick = e => {\n      this.setState({\n        id: e.target.id,\n        searchToggle: false\n      });\n      this.toggle();\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.props.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.props.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardImgDelete(board);\n    };\n\n    this.editBoardButtonClick = e => {\n      this.toggleEdit();\n      this.setState({\n        editBoardId: e.target.id\n      });\n    };\n\n    this.handleEditSubmit = response => {\n      console.log(response, 'handle edit sub');\n      this.props.editBoard(response);\n      this.toggleEdit();\n    };\n\n    this.state = {\n      modal: false,\n      editModal: false,\n      id: \"\",\n      editBoardId: \"\",\n      search: \"\",\n      results: [],\n      images: [],\n      title: \"\",\n      description: \"\",\n      selectedImage: \"\",\n      searchToggle: false\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n    this.searchToggleStateChange = this.searchToggleStateChange.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.state.editModal) {\n      this.props.getUser();\n    }\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  searchToggleStateChange() {\n    this.setState(prevState => ({\n      searchToggle: !prevState.searchToggle\n    }));\n  }\n\n  toggleEdit() {\n    this.setState(prevState => ({\n      editModal: !prevState.editModal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.props.createBoardToggle ? React.createElement(MakeBoard, {\n      updateBoard: this.updateBoard,\n      search: this.state.search,\n      results: this.state.results,\n      images: this.state.images,\n      title: this.state.title,\n      description: this.state.description,\n      createBoardToggleStateChange: this.props.createBoardToggleStateChange,\n      selectedImageStateChange: this.selectedImageStateChange,\n      imageStateChange: this.imageStateChange,\n      classChange: this.state.classChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }) : null, this.props.renderBoardDetail ? React.createElement(BoardDetail, {\n      toggleEdit: this.toggleEdit,\n      editModal: this.state.editModal,\n      editBoardId: this.state.editBoardId,\n      editBoardButtonClick: this.editBoardButtonClick,\n      handleEditSubmit: this.handleEditSubmit,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      images: this.state.images,\n      handleImageClick: this.handleImageClick,\n      handleImageSubmit: this.handleImageSubmit,\n      searchToggleStateChange: this.searchToggleStateChange,\n      searchToggle: this.state.searchToggle,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx"],"names":["React","Component","connect","MakeBoard","BoardDetail","getUser","deleteBoard","editBoard","findEditBoard","mapDispatchToProps","dispatch","user","board","mapStateToProps","state","renderBoardDetail","boards","selectedImage","ConnectedBoardContainer","constructor","handleImageSubmit","toggle","props","map","_id","id","updateBoard","foundBoard","images","push","fetch","process","env","REACT_APP_BACKEND_ADDRESS","method","body","JSON","stringify","headers","updateBoardImgDelete","console","log","forceUpdate","handleImageClick","e","image","setState","addNewImageButtonClick","target","searchToggle","deleteBoardButtonClick","deleteImageButtonClick","i","splice","editBoardButtonClick","toggleEdit","editBoardId","handleEditSubmit","response","modal","editModal","search","results","title","description","bind","searchToggleStateChange","componentDidMount","prevState","render","createBoardToggle","createBoardToggleStateChange","selectedImageStateChange","imageStateChange","classChange","BoardContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, deleteBoard, editBoard, findEditBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUser: user => dispatch(getUser(user)),\n        deleteBoard: board => dispatch(deleteBoard(board)),\n        editBoard: board => dispatch(editBoard(board)),\n        findEditBoard: board => dispatch(findEditBoard(board)),\n    }\n  };\n\nconst mapStateToProps = state => {\n    return { \n        renderBoardDetail: state.renderBoardDetail, \n        boards: state.boards,\n        selectedImage: state.selectedImage,\n        editBoard: state.editBoard,\n    }\n};\n\nclass ConnectedBoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            modal: false,\n            editModal: false,\n            id: \"\",\n            editBoardId: \"\",\n            search: \"\",\n            results: [],\n            images: [],\n            title: \"\",\n            description: \"\",\n            selectedImage: \"\",\n            searchToggle: false,\n        }\n        this.toggle = this.toggle.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n        this.searchToggleStateChange = this.searchToggleStateChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(!this.state.editModal){\n            this.props.getUser();\n        }\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.props.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n    };\n\n    updateBoardImgDelete = async (foundBoard) => {\n        console.log(foundBoard)\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${foundBoard._id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        this.forceUpdate();\n    };\n\n    handleImageClick = (e, image) => {\n        console.log(e, 'image click')\n        this.setState({\n            selectedImage: e\n        })\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal,\n        }));\n    };\n\n    searchToggleStateChange(){\n        this.setState(prevState => ({\n            searchToggle: !prevState.searchToggle\n        }));\n    };\n\n    toggleEdit(){\n        this.setState(prevState => ({\n            editModal: !prevState.editModal\n        }));\n    };\n\n    addNewImageButtonClick = (e) => {\n        this.setState({\n            id: e.target.id,\n            searchToggle: false\n        })\n        this.toggle();\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.props.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.props.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardImgDelete(board);\n    }; \n\n    editBoardButtonClick = (e) => {\n        this.toggleEdit();\n        this.setState({\n            editBoardId: e.target.id,\n        })\n    };\n\n    handleEditSubmit = (response) => {\n        console.log(response, 'handle edit sub')\n        this.props.editBoard(response)\n        this.toggleEdit();\n    };\n\n    render(){\n        return (\n            <div>\n                {\n                    this.props.createBoardToggle ?\n                    <MakeBoard updateBoard={ this.updateBoard } \n                    search={this.state.search} results={this.state.results} images={this.state.images} title={this.state.title}\n                    description={this.state.description} createBoardToggleStateChange={this.props.createBoardToggleStateChange}\n    \n                    selectedImageStateChange={ this.selectedImageStateChange } \n                     imageStateChange={ this.imageStateChange } \n                      classChange={ this.state.classChange } \n                     />\n                    :\n                    null\n                }   \n\n                {\n                    this.props.renderBoardDetail ?\n                        <BoardDetail toggleEdit={ this.toggleEdit } editModal={ this.state.editModal } editBoardId={ this.state.editBoardId }\n                        editBoardButtonClick={ this.editBoardButtonClick } handleEditSubmit={ this.handleEditSubmit } \n                        toggle={ this.toggle } modal={ this.state.modal } images={this.state.images} handleImageClick={ this.handleImageClick }\n                        handleImageSubmit={ this.handleImageSubmit } searchToggleStateChange={this.searchToggleStateChange} searchToggle={this.state.searchToggle} \n\n                        \n                        addNewImageButtonClick={ this.addNewImageButtonClick } \n                        deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick }\n                        />\n                    :\n                    null\n                }\n                 \n            </div>\n        )\n    }\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}