{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.getBoards = async () => {\n      const boards = await fetch('http://localhost:9000/boards', {\n        credentials: 'include'\n      });\n      const boardsJSON = await boards.json();\n      this.setState({\n        boards: boardsJSON.data\n      });\n    };\n\n    this.createBoard = async formData => {\n      const newBoard = await fetch('http://localhost:9000/boards', {\n        credentials: 'include',\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const parsedResponse = await newBoard.json();\n\n      if (newBoard.status === 200) {\n        this.setState({\n          boards: [parsedResponse.data, ...this.state.boards]\n        });\n      }\n    };\n\n    this.selectedImageStateChange = newState => {\n      this.setState({\n        selectedImage: newState.selectedImage\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.state.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n      this.componentDidMount();\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n      });\n      this.toggle();\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteBoard = async id => {\n      console.log(id);\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(id), {\n        method: \"DELETE\"\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: this.state.boards.filter(board => board._id != id)\n        });\n      }\n    };\n\n    this.updateBoardAfterDelete = async board => {\n      const response = await fetch(\"http://localhost:9000/boards/\".concat(board._id), {\n        method: \"PUT\",\n        body: JSON.stringify(board),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, board]\n        });\n      }\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardAfterDelete(board);\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      boards: [],\n      selectedImage: {},\n      id: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBoards();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      createBoard: this.createBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      updateBoard: this.updateBoard,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(BoardDetail, {\n      boards: this.state.boards,\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/5-10-image-board-creator/image-board-creator/front-end/src/BoardContainer/BoardContainer.jsx"],"names":["React","Component","ReactDOM","MakeBoard","BoardDetail","BoardContainer","constructor","getBoards","boards","fetch","credentials","boardsJSON","json","setState","data","createBoard","formData","newBoard","method","body","JSON","stringify","headers","parsedResponse","status","state","selectedImageStateChange","newState","selectedImage","handleImageSubmit","toggle","map","board","_id","id","updateBoard","componentDidMount","handleImageClick","e","image","addNewImageButtonClick","target","foundBoard","images","push","deleteBoardButtonClick","deleteBoard","console","log","response","filter","updateBoardAfterDelete","deleteImageButtonClick","i","splice","classChange","modal","bind","prevState","render","imageStateChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\n\nclass BoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            boards: [],\n            selectedImage: {},\n            id: \"\"\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n\n    componentDidMount(){\n        this.getBoards();\n    };\n\n    getBoards = async () => {\n        const boards = await fetch('http://localhost:9000/boards', {\n            credentials: 'include'\n        })\n        const boardsJSON = await boards.json();\n        this.setState({\n            boards: boardsJSON.data,\n        })\n    };\n\n    createBoard = async (formData) => {\n        const newBoard = await fetch('http://localhost:9000/boards', {\n            credentials: 'include',\n            method: \"POST\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const parsedResponse = await newBoard.json();\n        if(newBoard.status === 200){\n            this.setState({\n                boards: [parsedResponse.data, ...this.state.boards]\n            })\n        }\n    };\n\n    selectedImageStateChange = (newState) => {\n        this.setState({\n            selectedImage: newState.selectedImage\n        })\n    };\n\n    // imageStateChange = (newState) => {\n    //     this.setState({\n    //         images: newState.images\n    //     })\n    // };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.state.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n        this.componentDidMount()\n    }; \n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    addNewImageButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n        })\n        this.toggle();\n    };\n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteBoard = async (id) => {\n        console.log(id)\n        const response = await fetch(`http://localhost:9000/boards/${id}`, {\n            method: \"DELETE\",\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: this.state.boards.filter(board => board._id != id)\n            })\n        }\n    }; \n\n    updateBoardAfterDelete = async (board) => {\n        const response = await fetch(`http://localhost:9000/boards/${board._id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(board),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, board]\n            })\n        }\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardAfterDelete(board);\n    }; \n\n\n\n    render(){\n        return (\n            <div>\n            <MakeBoard createBoard={ this.createBoard } selectedImageStateChange={ this.selectedImageStateChange } \n            handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n            updateBoard={ this.updateBoard } toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n            handleImageSubmit={ this.handleImageSubmit } />            \n            \n            <BoardDetail boards={ this.state.boards } addNewImageButtonClick={ this.addNewImageButtonClick } \n            deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick } />\n            </div>\n        )\n    }\n}\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}