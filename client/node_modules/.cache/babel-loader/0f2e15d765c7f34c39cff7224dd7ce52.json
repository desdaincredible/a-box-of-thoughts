{"ast":null,"code":"var _jsxFileName = \"/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, updateBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: user => dispatch(getUser(user)) // updateBoard: board => dispatch(updateBoard(board)),\n\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    renderBoardDetail: state.renderBoardDetail,\n    boards: state.boards,\n    selectedImage: state.selectedImage\n  };\n};\n\nclass ConnectedBoardContainer extends Component {\n  constructor() {\n    super();\n\n    this.handleImageSubmit = () => {\n      this.toggle();\n      this.props.boards.map(board => {\n        if (board._id === this.state.id) {\n          this.updateBoard(board, board._id);\n        }\n      });\n    };\n\n    this.updateBoard = async (foundBoard, id) => {\n      foundBoard.images.push(this.state.selectedImage);\n      await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(foundBoard),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      this.props.getUser();\n    };\n\n    this.handleImageClick = (e, image) => {\n      this.setState({\n        selectedImage: e\n      }); // this.toggleClass();\n    };\n\n    this.addNewImageButtonClick = (e, id) => {\n      this.props.boards.map(board => {\n        this.setState({\n          id: e.target.id\n        });\n      });\n      this.toggle();\n    };\n\n    this.deleteBoardButtonClick = (e, id) => {\n      this.state.boards.map(board => {\n        if (board._id === e.target.id) {\n          this.deleteBoard(board._id);\n        }\n      });\n    };\n\n    this.deleteBoard = async id => {\n      console.log(id);\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(id), {\n        method: \"DELETE\"\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: this.state.boards.filter(board => board._id !== id)\n        });\n      }\n    };\n\n    this.updateBoardAfterDelete = async board => {\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(board._id), {\n        method: \"PUT\",\n        body: JSON.stringify(board),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, board]\n        });\n      }\n    };\n\n    this.deleteImageButtonClick = async (board, image, i) => {\n      if (board.images[i] === image) {\n        board.images.splice(image, 1);\n      }\n\n      ;\n      this.updateBoardAfterDelete(board);\n    };\n\n    this.editBoardButtonClick = e => {\n      this.setState({\n        editBoardId: e.target.id\n      });\n      this.toggleEdit();\n    };\n\n    this.handleEditSubmit = text => {\n      this.state.boards.map(board => {\n        if (board._id === this.state.editBoardId) {\n          this.editBoard(text, board);\n        }\n      });\n      this.toggleEdit();\n    };\n\n    this.editBoard = async (text, board) => {\n      const response = await fetch(\"\".concat(process.env.REACT_APP_BACKEND_ADDRESS, \"/boards/\").concat(this.state.editBoardId), {\n        method: \"PUT\",\n        body: JSON.stringify(text),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status === 200) {\n        this.setState({\n          boards: [...this.state.boards, text, board]\n        });\n      }\n\n      this.getUser();\n    };\n\n    this.state = {\n      classChange: false,\n      modal: false,\n      editModal: false,\n      id: \"\",\n      editBoardId: \"\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUser();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  toggleEdit() {\n    this.setState(prevState => ({\n      editModal: !prevState.editModal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(MakeBoard, {\n      updateBoard: this.updateBoard,\n      selectedImageStateChange: this.selectedImageStateChange,\n      handleImageClick: this.handleImageClick,\n      imageStateChange: this.imageStateChange,\n      toggle: this.toggle,\n      modal: this.state.modal,\n      classChange: this.state.classChange,\n      handleImageSubmit: this.handleImageSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), this.props.renderBoardDetail ? React.createElement(BoardDetail, {\n      addNewImageButtonClick: this.addNewImageButtonClick,\n      deleteBoardButtonClick: this.deleteBoardButtonClick,\n      deleteImageButtonClick: this.deleteImageButtonClick,\n      toggleEdit: this.toggleEdit,\n      editModal: this.state.editModal,\n      editBoardButtonClick: this.editBoardButtonClick,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\nexport default BoardContainer;","map":{"version":3,"sources":["/Users/moosesdeuces/sei-june-bug/6-5-box-of-thoughts-redux/box-of-thoughts-redux/client/src/js/components/BoardContainer/BoardContainer.jsx"],"names":["React","Component","connect","MakeBoard","BoardDetail","getUser","updateBoard","mapDispatchToProps","dispatch","user","mapStateToProps","state","renderBoardDetail","boards","selectedImage","ConnectedBoardContainer","constructor","handleImageSubmit","toggle","props","map","board","_id","id","foundBoard","images","push","fetch","process","env","REACT_APP_BACKEND_ADDRESS","method","body","JSON","stringify","headers","handleImageClick","e","image","setState","addNewImageButtonClick","target","deleteBoardButtonClick","deleteBoard","console","log","response","status","filter","updateBoardAfterDelete","deleteImageButtonClick","i","splice","editBoardButtonClick","editBoardId","toggleEdit","handleEditSubmit","text","editBoard","classChange","modal","editModal","bind","componentDidMount","prevState","render","selectedImageStateChange","imageStateChange","BoardContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MakeBoard from './MakeBoard/MakeBoard';\nimport BoardDetail from './BoardDetail/BoardDetail';\nimport { getUser, updateBoard } from '../../actions/actions';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUser: user => dispatch(getUser(user)),\n        // updateBoard: board => dispatch(updateBoard(board)),\n    }\n  };\n\nconst mapStateToProps = state => {\n    return { \n        renderBoardDetail: state.renderBoardDetail, \n        boards: state.boards,\n        selectedImage: state.selectedImage,\n    }\n};\n\nclass ConnectedBoardContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            classChange: false,\n            modal: false,\n            editModal: false,\n            id: \"\",\n            editBoardId: \"\",\n        }\n        this.toggle = this.toggle.bind(this);\n        this.toggleEdit = this.toggleEdit.bind(this);\n    }\n\n    componentDidMount(){\n        this.props.getUser();\n    };\n\n    handleImageSubmit = ()=> {\n        this.toggle();\n        this.props.boards.map((board) => {\n            if(board._id === this.state.id){\n                this.updateBoard(board, board._id)\n            }\n        })\n    }; \n\n    updateBoard = async (foundBoard, id) => {\n        foundBoard.images.push(this.state.selectedImage);\n        await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(foundBoard),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        this.props.getUser();\n    };\n\n    // toggleClass = () => {\n    //     // console.log(this.state.classChange, 'toggle class');\n    //     this.setState({\n    //         classChange: true\n    //     })\n    // };\n\n    handleImageClick = (e, image) => {\n        this.setState({\n            selectedImage: e\n        })\n        // this.toggleClass();\n    };\n\n    toggle(){\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    };\n\n    toggleEdit(){\n        this.setState(prevState => ({\n            editModal: !prevState.editModal\n        }));\n    };\n\n    addNewImageButtonClick = (e, id) => {\n        this.props.boards.map((board) => {\n            this.setState({\n                id: e.target.id\n            })\n        })\n        this.toggle();\n    };\n\n    deleteBoardButtonClick = (e, id) => {\n        this.state.boards.map((board) => {\n            if (board._id === e.target.id){\n                this.deleteBoard(board._id)\n            }\n        })\n    };\n\n    deleteBoard = async (id) => {\n        console.log(id)\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${id}`, {\n            method: \"DELETE\",\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: this.state.boards.filter(board => board._id !== id)\n            })\n        }\n    }; \n\n    updateBoardAfterDelete = async (board) => {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${board._id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(board),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, board]\n            })\n        }\n    };\n\n    deleteImageButtonClick = async (board, image, i) => {\n        if(board.images[i] === image){\n            board.images.splice(image, 1)\n        };        \n        this.updateBoardAfterDelete(board);\n    }; \n\n    editBoardButtonClick = (e) => {\n        this.setState({\n            editBoardId: e.target.id\n        })\n        this.toggleEdit();\n    };\n\n    handleEditSubmit = (text) => {\n        this.state.boards.map((board) => {\n            if (board._id === this.state.editBoardId){\n                this.editBoard(text, board)\n            }\n        })\n        this.toggleEdit();\n    };\n\n    editBoard = async (text, board) => {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_ADDRESS}/boards/${this.state.editBoardId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(text),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        if(response.status === 200){\n            this.setState({\n                boards: [...this.state.boards, text, board]\n            })\n        }\n        this.getUser();\n    }; \n\n    render(){\n        return (\n            <div>   \n                <MakeBoard updateBoard={ this.updateBoard } \n                selectedImageStateChange={ this.selectedImageStateChange } \n                handleImageClick={ this.handleImageClick } imageStateChange={ this.imageStateChange } \n                 toggle={ this.toggle } modal={ this.state.modal } classChange={ this.state.classChange } \n                handleImageSubmit={ this.handleImageSubmit } />\n                <hr />\n                {\n                    this.props.renderBoardDetail ?\n                        <BoardDetail addNewImageButtonClick={ this.addNewImageButtonClick } \n                        deleteBoardButtonClick={ this.deleteBoardButtonClick } deleteImageButtonClick= { this.deleteImageButtonClick }\n                        toggleEdit={ this.toggleEdit } editModal={ this.state.editModal } editBoardButtonClick={ this.editBoardButtonClick }\n                        handleEditSubmit={ this.handleEditSubmit }  />\n                    :\n                    null\n                }      \n                 \n            </div>\n        )\n    }\n}\n\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(ConnectedBoardContainer);\n\nexport default BoardContainer;"]},"metadata":{},"sourceType":"module"}